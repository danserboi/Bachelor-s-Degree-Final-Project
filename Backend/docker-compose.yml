version: '3.8'

services:
  db:
    image: postgres:14.3
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=quotes_db
    expose:
      - "5432"
    volumes:
      - db-data:/data/postgres
    restart: always

  db-management:
    depends_on:
      - db
    image: adminer:4.8.1
    container_name: db-management
    environment:
      ADMINER_DEFAULT_SERVER: db
    ports:
      - "8080:8080"
    restart: always

  api:
    depends_on:
      - db
      - rabbitmq
    build: ./flask-app
    image: api
    container_name: api
    env_file:
      - .env
    expose:
      - "5000"
    volumes:
      - ./flask-app:/src
    restart: always

  nginx:
    depends_on:
      - api
    image: nginx:1.22.0
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/key.pem:/root/ssl/key.pem
      - ./nginx/cert.pem:/root/ssl/cert.pem
    restart: always

  rabbitmq:
    image: rabbitmq:3.10.5-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
    expose:
      - "5672"
      - "15672"
    volumes:
      - celery-broker-data:/data/rabbitmq
    restart: always

  redis:
    image: redis:7.0.0
    container_name: redis
    expose:
      - "6379"
    volumes:
      - celery-backend-data:/data/redis
    restart: always

  celery-worker:
    depends_on:
      - rabbitmq
      - redis
    build: ./flask-app
    entrypoint: celery -A src.celery.tasks worker --loglevel=INFO
    image: celery-worker
    container_name: celery-worker
    env_file:
      - .env
    volumes:
      - ./flask-app:/src
    restart: always

  celery-beat:
    depends_on:
      - rabbitmq
      - redis
    build: ./flask-app
    entrypoint: celery -A src.celery.tasks beat --loglevel=INFO
    image: celery-beat
    container_name: celery-beat
    env_file:
      - .env
    volumes:
      - ./flask-app:/src
    restart: always

volumes:
  db-data: {}
  celery-broker-data: {}
  celery-backend-data: {}